require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe CollectionsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Collection. As you add validations to Collection, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { data:
      { attributes:
        { name: 'test_collection', user_id: 1 },
        type: 'collections'
      }
    }
  end

  let(:invalid_attributes) do
    { data:
      { attributes:
        { name: nil, user_id: 1 },
        type: 'collections'
      }
    }
  end

  let(:new_attributes) do
    { data:
      { attributes:
        { name: 'new name' },
        type: 'collections'
      }
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CollectionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'returns a success response' do
      prepare_request(1)
      collection = Collection.create! valid_attributes[:data][:attributes]
      get :index, params: {}, session: valid_session
      expect(response).to have_http_status(:ok)
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      prepare_request(1)
      collection = Collection.create! valid_attributes[:data][:attributes]
      get :show, params: { id: collection.id }, session: valid_session
      expect(response).to be_success
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Collection' do
        expect {
          prepare_request(1)
          post :create, params: valid_attributes, session: valid_session
        }.to change(Collection, :count).by(1)
      end

      it 'renders a JSON response with the new collection' do
        prepare_request(1)
        post :create, params: valid_attributes, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/vnd.api+json')
        expect(response.location).to eq(collection_url(Collection.last))
      end
    end

    context 'with invalid params' do
      it 'renders a JSON response with errors for the new collection' do
        prepare_request(1)
        post :create, params: invalid_attributes, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/vnd.api+json')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do

      it 'updates the requested collection' do
        collection = Collection.create! valid_attributes[:data][:attributes]
        new_attributes[:id] = collection.id
        prepare_request(1)
        put :update, params: new_attributes, session: valid_session
        collection.reload
        expect(collection.name).to eq(new_attributes[:data][:attributes][:name])
      end

      it 'renders a JSON response with the collection' do
        collection = Collection.create! valid_attributes[:data][:attributes]
        new_attributes[:id] = collection.id
        prepare_request(1)
        put :update, params: new_attributes, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/vnd.api+json')
      end
    end

    context 'with invalid params' do
      it 'renders a JSON response with errors for the collection' do
        collection = Collection.create! valid_attributes[:data][:attributes]
        invalid_attributes[:id] = collection.id
        prepare_request(1)
        put :update, params: invalid_attributes, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/vnd.api+json')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested collection' do
      collection = Collection.create! valid_attributes[:data][:attributes]
      prepare_request(1)
      expect {
        delete :destroy, params: { id: collection.to_param }, session: valid_session
      }.to change(Collection, :count).by(-1)
    end
  end
end
